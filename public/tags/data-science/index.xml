<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science on pRopaganda by smaakagen</title>
    <link>/tags/data-science/</link>
    <description>Recent content in Data Science on pRopaganda by smaakagen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/data-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&#39;dockr&#39;: easy containerization for R</title>
      <link>/2019/11/01/dockr-easy-containerization-for-r/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/01/dockr-easy-containerization-for-r/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/smaakage85/dockr/blob/master/man/figures/dockr.png?raw=true&#34; align=&#34;right&#34; height=250/&gt;&lt;/p&gt;
&lt;div id=&#34;dockr-now-on-cran&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;dockr&lt;/code&gt; now on CRAN&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dockr&lt;/code&gt; 0.8.4 is now available on CRAN. &lt;code&gt;dockr&lt;/code&gt; is a minimal toolkit to build a
lightweight Docker container image for your R package, in which the package
itself is available. The Docker image seeks to mirror your R session as close as
possible with respect to R specific dependencies. Both dependencies on CRAN
R packages as well as local non-CRAN R packages will be included in the Docker
container image.&lt;/p&gt;
&lt;p&gt;If you want to know, how Docker works, and why you should consider using Docker,
please take a look at the &lt;a href=&#34;https://www.docker.com/why-docker&#34;&gt;Docker website&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src=&#34;https://open.spotify.com/embed/track/5IR7Ui6MB7MrFZfF5hsoIH&#34; width=&#34;300&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install the development version of &lt;code&gt;dockr&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remotes::install_github(&amp;quot;smaakage85/dockr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or install the version released on CRAN:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;dockr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;When you work on an R project, it is often desirable to organize the code in the
R package structure. &lt;code&gt;dockr&lt;/code&gt; facilitates easy creation of a Docker container
image that mirrors your current R session and includes all of the R dependencies
needed to run your R package.&lt;/p&gt;
&lt;p&gt;First, load the &lt;code&gt;dockr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dockr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order do create the files, that constitute the Docker image, simply invoke
the &lt;code&gt;prepare_docker_image()&lt;/code&gt; function and point to the folder with your package.&lt;/p&gt;
&lt;p&gt;The workflow of &lt;code&gt;prepare_docker_image()&lt;/code&gt; is summarized below:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Build and install the package on your system&lt;/li&gt;
&lt;li&gt;Identify R package dependencies of the package&lt;/li&gt;
&lt;li&gt;Detect the version numbers of the loaded and installed versions of these
packages on your system&lt;/li&gt;
&lt;li&gt;Write Dockerfile and create all other files needed to build the Docker image&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, I will let &lt;code&gt;dockr&lt;/code&gt; do its magic and create the files for a Docker image
container, in which &lt;code&gt;dockr&lt;/code&gt; is installed together with all of the R package
dependencies, &lt;code&gt;dockr&lt;/code&gt; needs to run.&lt;/p&gt;
&lt;p&gt;Beware that the files are created as side-effects of the function call. Since
my ‘dockr’ package lives in a folder called &lt;code&gt;docker&lt;/code&gt;, I call the function like
this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;image_dockr &amp;lt;- prepare_docker_image(&amp;quot;~/docker&amp;quot;, 
                                    dir_image = &amp;quot;~&amp;quot;,
                                    dir_install = &amp;quot;auto&amp;quot;)
#&amp;gt; v Deleting existing folder for files for Docker image: ~/dockr_0.8.4
#&amp;gt; v Creating folder for files for Docker image: ~/dockr_0.8.4
#&amp;gt; v Creating folder for source packages: ~/dockr_0.8.4/source_packages
#&amp;gt; v Creating empty Dockerfile: ~/dockr_0.8.4/Dockerfile
#&amp;gt; --- Building, installing and loading package...
#&amp;gt; Writing NAMESPACE
#&amp;gt; Writing NAMESPACE
#&amp;gt; --- Writing Dockerfile...
#&amp;gt; v Preparing FROM statement
#&amp;gt; v Identifying and mirroring R package dependencies
#&amp;gt; v Matching dependencies with CRAN packages
#&amp;gt; v Preparing install statements for specific versions of CRAN packages
#&amp;gt; v Preparing install statement for the package itself
#&amp;gt; v Writing lines to Dockerfile
#&amp;gt; v Closing connection to Dockerfile
#&amp;gt; - in R : 
#&amp;gt; =&amp;gt; to inspect Dockerfile run:
#&amp;gt; dockr::print_file(&amp;quot;~/dockr_0.8.4/Dockerfile&amp;quot;) 
#&amp;gt; =&amp;gt; to edit Dockerfile run:
#&amp;gt; dockr::write_lines_to_file([lines], &amp;quot;~/dockr_0.8.4/Dockerfile&amp;quot;) 
#&amp;gt; - in Shell : 
#&amp;gt; =&amp;gt; to build Docker image run:
#&amp;gt; cd C:\Users\Lars\Documents\dockr_0.8.4 
#&amp;gt; docker build -t dockr_0.8.4 . 
#&amp;gt; Please note that Docker must be installed in order for you to build image.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, argument ‘dir_image’ decides, where the files for the docker image will
be saved. ‘dir_install’ is the directory, where your package will be installed
on your system. You can choose to install the package in a temporary folder
by setting &lt;code&gt;dir_install = tempdir()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Great, all necessary files for the Docker image have been created, and you
can build the Docker image right away by following the instructions. It is as
easy as that! Yeah!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;files-for-docker-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Files for Docker image&lt;/h2&gt;
&lt;p&gt;Let us just take a quick look into the folder with the files for the Docker
image to see the works of &lt;code&gt;dockr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list.files(image_dockr$paths$dir_image)
#&amp;gt; [1] &amp;quot;Dockerfile&amp;quot;      &amp;quot;source_packages&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It contains a Dockerfile and a folder named ‘source_packages’.&lt;/p&gt;
&lt;div id=&#34;dockerfile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;The resulting Dockerfile can be printed with the &lt;code&gt;print_file()&lt;/code&gt; function, that
comes with &lt;code&gt;dockr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_file(image_dockr$paths$path_Dockerfile)
#&amp;gt; # load rocker base-R image
#&amp;gt; FROM rocker/r-ver:3.6.0
#&amp;gt; 
#&amp;gt; # install specific versions of CRAN packages from MRAN snapshots
#&amp;gt; RUN R -e &amp;#39;install.packages(&amp;quot;remotes&amp;quot;)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;askpass&amp;quot;, &amp;quot;1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;assertthat&amp;quot;, &amp;quot;0.2.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;brew&amp;quot;, &amp;quot;1.0-6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;cli&amp;quot;, &amp;quot;1.1.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;clisymbols&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;commonmark&amp;quot;, &amp;quot;1.7&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;crayon&amp;quot;, &amp;quot;1.3.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;desc&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;fs&amp;quot;, &amp;quot;1.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;gh&amp;quot;, &amp;quot;1.0.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;glue&amp;quot;, &amp;quot;1.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;gtools&amp;quot;, &amp;quot;3.8.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;ini&amp;quot;, &amp;quot;0.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;jsonlite&amp;quot;, &amp;quot;1.6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;magrittr&amp;quot;, &amp;quot;1.5&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;memoise&amp;quot;, &amp;quot;1.1.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;pkgload&amp;quot;, &amp;quot;1.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;prettyunits&amp;quot;, &amp;quot;1.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;ps&amp;quot;, &amp;quot;1.3.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;R6&amp;quot;, &amp;quot;2.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rcmdcheck&amp;quot;, &amp;quot;1.3.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;roxygen2&amp;quot;, &amp;quot;6.1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rprojroot&amp;quot;, &amp;quot;1.3-2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rstudioapi&amp;quot;, &amp;quot;0.10&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;sessioninfo&amp;quot;, &amp;quot;1.1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;stringi&amp;quot;, &amp;quot;1.4.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;stringr&amp;quot;, &amp;quot;1.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;withr&amp;quot;, &amp;quot;2.1.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;xopen&amp;quot;, &amp;quot;1.0.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;yaml&amp;quot;, &amp;quot;2.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;backports&amp;quot;, &amp;quot;1.1.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;callr&amp;quot;, &amp;quot;3.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;clipr&amp;quot;, &amp;quot;0.6.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;curl&amp;quot;, &amp;quot;3.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;devtools&amp;quot;, &amp;quot;2.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;digest&amp;quot;, &amp;quot;0.6.20&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;git2r&amp;quot;, &amp;quot;0.25.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;httr&amp;quot;, &amp;quot;1.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;mime&amp;quot;, &amp;quot;0.6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;openssl&amp;quot;, &amp;quot;1.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;pkgbuild&amp;quot;, &amp;quot;1.0.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;processx&amp;quot;, &amp;quot;3.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;purrr&amp;quot;, &amp;quot;0.3.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;Rcpp&amp;quot;, &amp;quot;1.0.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;remotes&amp;quot;, &amp;quot;2.0.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rlang&amp;quot;, &amp;quot;0.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;sys&amp;quot;, &amp;quot;3.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;usethis&amp;quot;, &amp;quot;1.5.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;whisker&amp;quot;, &amp;quot;0.3-2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;xml2&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; 
#&amp;gt; # copy source packages (*.tar.gz) to container
#&amp;gt; COPY source_packages /source_packages
#&amp;gt; 
#&amp;gt; # install &amp;#39;dockr&amp;#39; package
#&amp;gt; RUN R -e &amp;#39;install.packages(pkgs = &amp;quot;source_packages/dockr_0.8.4.tar.gz&amp;quot;, repos = NULL)&amp;#39;
#&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, the versions of the R packages, that will be installed in the Docker
container image, are all given explicitly. They will mirror the versions of the
dependencies, that are in fact loaded or installed on your system. In this way,
the Docker container image seeks to reflect your current R session as close as
possible and by doing so create an environment, where you will be able to
reproduce results from your current R session.&lt;/p&gt;
&lt;p&gt;Also note, that CRAN R packages will be installed from relevant
&lt;a href=&#34;https://mran.microsoft.com/&#34;&gt;MRAN snapshots&lt;/a&gt; - using the
&lt;code&gt;remotes::install_version()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;folder-with-source-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Folder with Source Packages&lt;/h3&gt;
&lt;p&gt;The ‘source_packages’ folder contains the local (non-CRAN) packages, that have
to be installed in the Docker container image in order for &lt;code&gt;dockr&lt;/code&gt; to run.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;dockr&lt;/code&gt; does not depend on any local (non-CRAN) packages,
&lt;code&gt;source_packages&lt;/code&gt; only contains a source package version of &lt;code&gt;dockr&lt;/code&gt; itself,
i.e.:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list.files(image_dockr$paths$dir_source_packages)
#&amp;gt; [1] &amp;quot;dockr_0.8.4.tar.gz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-edit-dockerfile-further&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to edit Dockerfile further&lt;/h2&gt;
&lt;p&gt;If there is need for adding additional lines to/editing the Dockerfile (e.g.
if you have to install any non-R &lt;a href=&#34;#nonr&#34;&gt;dependencies&lt;/a&gt;, this can
be achieved with the &lt;code&gt;write_lines_to_file()&lt;/code&gt; function. &lt;code&gt;write_lines_to_file()&lt;/code&gt;
enables you to add new lines to the beginning or the end of the Dockerfile.&lt;/p&gt;
&lt;p&gt;Let us try it out and write a couple of additional lines to the Dockerfile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# write three lines to beginning of file.
write_lines_to_file(c(&amp;quot;# set maintainer&amp;quot;,
                    &amp;quot;MAINTAINER Lars KJELDGAARD &amp;lt;lars_kjeldgaard@hotmail.com&amp;gt;&amp;quot;, 
                    &amp;quot;&amp;quot;),
                    image_dockr$paths$path_Dockerfile,
                    prepend = TRUE,
                    print_file = FALSE)

# write lines to the end of the file.
write_lines_to_file(c(&amp;quot;# check out smaakage85.netlify.com &amp;gt;:-]~~&amp;quot;),
                    image_dockr$paths$path_Dockerfile,
                    prepend = FALSE,
                    print_file = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a look at the resulting Dockerfile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_file(image_dockr$paths$path_Dockerfile)
#&amp;gt; # set maintainer
#&amp;gt; MAINTAINER Lars KJELDGAARD &amp;lt;lars_kjeldgaard@hotmail.com&amp;gt;
#&amp;gt; 
#&amp;gt; # load rocker base-R image
#&amp;gt; FROM rocker/r-ver:3.6.0
#&amp;gt; 
#&amp;gt; # install specific versions of CRAN packages from MRAN snapshots
#&amp;gt; RUN R -e &amp;#39;install.packages(&amp;quot;remotes&amp;quot;)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;askpass&amp;quot;, &amp;quot;1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;assertthat&amp;quot;, &amp;quot;0.2.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;brew&amp;quot;, &amp;quot;1.0-6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;cli&amp;quot;, &amp;quot;1.1.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;clisymbols&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;commonmark&amp;quot;, &amp;quot;1.7&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;crayon&amp;quot;, &amp;quot;1.3.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;desc&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;fs&amp;quot;, &amp;quot;1.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;gh&amp;quot;, &amp;quot;1.0.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;glue&amp;quot;, &amp;quot;1.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;gtools&amp;quot;, &amp;quot;3.8.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;ini&amp;quot;, &amp;quot;0.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;jsonlite&amp;quot;, &amp;quot;1.6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;magrittr&amp;quot;, &amp;quot;1.5&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;memoise&amp;quot;, &amp;quot;1.1.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;pkgload&amp;quot;, &amp;quot;1.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;prettyunits&amp;quot;, &amp;quot;1.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;ps&amp;quot;, &amp;quot;1.3.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;R6&amp;quot;, &amp;quot;2.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rcmdcheck&amp;quot;, &amp;quot;1.3.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;roxygen2&amp;quot;, &amp;quot;6.1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rprojroot&amp;quot;, &amp;quot;1.3-2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rstudioapi&amp;quot;, &amp;quot;0.10&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;sessioninfo&amp;quot;, &amp;quot;1.1.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;stringi&amp;quot;, &amp;quot;1.4.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;stringr&amp;quot;, &amp;quot;1.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;withr&amp;quot;, &amp;quot;2.1.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;xopen&amp;quot;, &amp;quot;1.0.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;yaml&amp;quot;, &amp;quot;2.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;backports&amp;quot;, &amp;quot;1.1.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;callr&amp;quot;, &amp;quot;3.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;clipr&amp;quot;, &amp;quot;0.6.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;curl&amp;quot;, &amp;quot;3.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;devtools&amp;quot;, &amp;quot;2.0.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;digest&amp;quot;, &amp;quot;0.6.20&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;git2r&amp;quot;, &amp;quot;0.25.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;httr&amp;quot;, &amp;quot;1.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;mime&amp;quot;, &amp;quot;0.6&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;openssl&amp;quot;, &amp;quot;1.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;pkgbuild&amp;quot;, &amp;quot;1.0.3&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;processx&amp;quot;, &amp;quot;3.3.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;purrr&amp;quot;, &amp;quot;0.3.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;Rcpp&amp;quot;, &amp;quot;1.0.1&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;remotes&amp;quot;, &amp;quot;2.0.4&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;rlang&amp;quot;, &amp;quot;0.4.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;sys&amp;quot;, &amp;quot;3.2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;usethis&amp;quot;, &amp;quot;1.5.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;whisker&amp;quot;, &amp;quot;0.3-2&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; RUN R -e &amp;#39;remotes::install_version(&amp;quot;xml2&amp;quot;, &amp;quot;1.2.0&amp;quot;, dependencies = FALSE)&amp;#39;
#&amp;gt; 
#&amp;gt; # copy source packages (*.tar.gz) to container
#&amp;gt; COPY source_packages /source_packages
#&amp;gt; 
#&amp;gt; # install &amp;#39;dockr&amp;#39; package
#&amp;gt; RUN R -e &amp;#39;install.packages(pkgs = &amp;quot;source_packages/dockr_0.8.4.tar.gz&amp;quot;, repos = NULL)&amp;#39;
#&amp;gt; 
#&amp;gt; # check out smaakage85.netlify.com &amp;gt;:-]~~&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dealing-with-local-non-cran-r-package-dependencies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dealing with local non-CRAN R package dependencies&lt;/h2&gt;
&lt;p&gt;If your package depends on local non-CRAN R packages, &lt;code&gt;dockr&lt;/code&gt; will also include
these packages in the Docker container image. Local non-CRAN R packages must be
available as source packages ([packageName]_[packageVersion].tar.gz) in one
or more user specified local directories. These paths have to be specified in the
‘dir_src’ argument, when invoking the &lt;code&gt;prepare_docker_image()&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# image for my package &amp;#39;recorder&amp;#39;.
image_recorder &amp;lt;- prepare_docker_image(&amp;quot;~/recorder&amp;quot;,
                                       dir_image = &amp;quot;~&amp;quot;,
                                       dir_install = &amp;quot;auto&amp;quot;,
                                       dir_src = c(&amp;quot;~/src&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, that you can store &lt;strong&gt;multiple&lt;/strong&gt; versions of the same package in your local
repos. In this way ‘dockr’ comes with a lot of flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-non-r-dependencies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What about non-R dependencies?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dockr&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; deal with any non-R dependencies what so ever at this point.
In case that, for instance, your package has any Linux specific dependencies,
you will have to install them yourself in the Docker container image.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;contact&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Contact&lt;/h2&gt;
&lt;p&gt;I hope, that you will find &lt;code&gt;dockr&lt;/code&gt; useful.&lt;/p&gt;
&lt;p&gt;Please direct any questions and feedbacks to &lt;a href=&#34;mailto:lars_kjeldgaard@hotmail.com&#34;&gt;me&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;If you want to contribute, open a &lt;a href=&#34;https://github.com/smaakage85/dockr/pulls&#34;&gt;PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you encounter a bug or want to suggest an enhancement, please &lt;a href=&#34;https://github.com/smaakage85/dockr/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Best,
smaakagen&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>recorder: Validate Predictors in New Data</title>
      <link>/2019/05/21/recorder-validate-new-data-for-predictions/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/21/recorder-validate-new-data-for-predictions/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/smaakage85/recorder/blob/master/man/figures/logo.png?raw=true&#34; align=&#34;right&#34; height=250/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;recorder&lt;/code&gt; 0.8.1 is now available on CRAN. &lt;code&gt;recorder&lt;/code&gt; is a lightweight toolkit to
validate new observations before computing their corresponding predictions with
a predictive model.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;recorder&lt;/code&gt; the validation process consists of two steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;record relevant statistics and meta data of the variables in the original
training data for the predictive model&lt;/li&gt;
&lt;li&gt;use these data to run a set of basic validation tests on the new set of
observations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we will take a deeper look into, what &lt;code&gt;recorder&lt;/code&gt; has to offer.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;[PLAY]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://open.spotify.com/embed/track/0k1xMUwn9sb7bZiqdT9ygx&#34; width=&#34;300&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;
&lt;/iframe&gt;
&lt;div id=&#34;motivation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;There can be many data specific reasons, why you might not be confident in the
predictions of a predictive model on new data.&lt;/p&gt;
&lt;p&gt;Some of them are obvious, e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One or more variables in training data are not found in new data&lt;/li&gt;
&lt;li&gt;The class of a given variable differs in training data and new data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others are more subtle, for instance when observations in
new data are not within the “span” of the training data. One example of this could
be, when a variable is “N/A” (missing) for a new observation to be predicted,
but no missing values appeared for the same variable in the training data.
This implies, that the new observation is not within the “span” of the training
data. Another way of putting this: the model has never encountered an
observation like this before, therefore there is good reason to doubt the
quality of the prediction.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recorder-workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;recorder workflow&lt;/h2&gt;
&lt;p&gt;We will need some data in order to demonstrate the &lt;code&gt;recorder&lt;/code&gt; workflow. As so
many times before the famous &lt;code&gt;iris&lt;/code&gt; data set will be used as an example. The
data set is divided into training data, that can be used for model development,
and new data for predictions after modelling, which we can validate with
&lt;code&gt;recordr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
trn_idx &amp;lt;- sample(seq_len(nrow(iris)), 100)
data_training &amp;lt;- iris[trn_idx, ]
data_new &amp;lt;- iris[-trn_idx, ]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;record-statistics-and-meta-data-of-variables-in-training-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Record statistics and meta data of variables in training data&lt;/h3&gt;
&lt;p&gt;What we want to achieve is to validate the new observations (before computing
their predictions with a predictive model) based on relevant
statistics and meta data of the variables in the training data. Therefore
relevant statistics and meta data of the variables must first be learned
(recorded) from the trainingdata of the model. This is done with the &lt;code&gt;record()&lt;/code&gt;
function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(recorder)
tape &amp;lt;- record(data_training)
#&amp;gt; 
#&amp;gt; [RECORD]
#&amp;gt; 
#&amp;gt; ... recording meta data and statistics of 100 rows with 5 columns... 
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This provides us with an object belonging to the &lt;code&gt;data.tape&lt;/code&gt; class.
The &lt;code&gt;data.tape&lt;/code&gt; contains the statistics and meta data recorded from the training
data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tape)
#&amp;gt; List of 2
#&amp;gt;  $ class_variables:List of 5
#&amp;gt;   ..$ Sepal.Length: chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Sepal.Width : chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Petal.Length: chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Petal.Width : chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Species     : chr &amp;quot;factor&amp;quot;
#&amp;gt;  $ parameters     :List of 5
#&amp;gt;   ..$ Sepal.Length:List of 3
#&amp;gt;   .. ..$ min   : num 4.3
#&amp;gt;   .. ..$ max   : num 7.9
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Sepal.Width :List of 3
#&amp;gt;   .. ..$ min   : num 2
#&amp;gt;   .. ..$ max   : num 4.2
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Petal.Length:List of 3
#&amp;gt;   .. ..$ min   : num 1
#&amp;gt;   .. ..$ max   : num 6.9
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Petal.Width :List of 3
#&amp;gt;   .. ..$ min   : num 0.1
#&amp;gt;   .. ..$ max   : num 2.5
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Species     :List of 2
#&amp;gt;   .. ..$ levels: chr [1:3] &amp;quot;setosa&amp;quot; &amp;quot;versicolor&amp;quot; &amp;quot;virginica&amp;quot;
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;  - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;list&amp;quot; &amp;quot;data.tape&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, which meta data and statistics are recorded for the individual
variables depends on the class of the given variable, e.g. for a numeric
variable &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values are computed, whilst &lt;code&gt;levels&lt;/code&gt; is recorded for
factor variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;validate-new-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Validate new data&lt;/h3&gt;
&lt;p&gt;First, to spice things up, we will give the new observations a twist by inserting
some extreme values and some missing values. On top of that we will create a new
column, that was not observed in training data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create sample of row indices.
samples &amp;lt;- lapply(1:3, function(x) {
  set.seed(x) 
  sample(nrow(data_new), 5, replace = FALSE)})

# create numeric values without range, -Inf and Inf.
data_new$Sepal.Width[samples[[1]]] &amp;lt;- -Inf
data_new$Petal.Width[samples[[2]]] &amp;lt;- Inf

# insert NA&amp;#39;s in numeric vector.
data_new$Petal.Length[samples[[3]]] &amp;lt;- NA_real_

# insert new column.
data_new$junk &amp;lt;- &amp;quot;junk&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we will validate the new observations by running a number of basic
validation tests on each of the new observations. The tests are based on the
&lt;code&gt;data.tape&lt;/code&gt; with the recorded statistics and meta data of variabels in the
training data.&lt;/p&gt;
&lt;p&gt;You can get an overview over the validation tests with &lt;code&gt;get_tests_meta_data()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_tests_meta_data()
#&amp;gt;           test_name evaluate_level   evaluate_class
#&amp;gt; 1: missing_variable            col              all
#&amp;gt; 2:   mismatch_class            col              all
#&amp;gt; 3:  mismatch_levels            col           factor
#&amp;gt; 4:     new_variable            col              all
#&amp;gt; 5:    outside_range            row numeric, integer
#&amp;gt; 6:        new_level            row           factor
#&amp;gt; 7:           new_NA            row              all
#&amp;gt; 8:         new_text            row        character
#&amp;gt;                                                    description
#&amp;gt; 1:  variable observed in training data but missing in new data
#&amp;gt; 2: &amp;#39;class&amp;#39; in new data does not match &amp;#39;class&amp;#39; in training data
#&amp;gt; 3:    &amp;#39;levels&amp;#39; in new data and training data are not identical
#&amp;gt; 4:      variable observed in new data but not in training data
#&amp;gt; 5:   value in new data outside recorded range in training data
#&amp;gt; 6:           new &amp;#39;level&amp;#39; in new data compared to training data
#&amp;gt; 7:            NA observed in new data but not in training data
#&amp;gt; 8:              new text in new data compared to training data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run the tests simply invoke the &lt;code&gt;play()&lt;/code&gt; function with the recorded &lt;code&gt;data.tape&lt;/code&gt;
on the new data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;playback &amp;lt;- play(tape, data_new)
#&amp;gt; 
#&amp;gt; [PLAY]
#&amp;gt; 
#&amp;gt; ... playing data.tape on new data with 50 rows with 6 columns ...
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we actually have here is an object belonging to the new &lt;code&gt;data.playback&lt;/code&gt;
class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(playback)
#&amp;gt; [1] &amp;quot;data.playback&amp;quot; &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, now let us have a detailed look at the test results with the &lt;code&gt;print()&lt;/code&gt;
method.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;playback
#&amp;gt; 
#&amp;gt; [PLAY]
#&amp;gt; 
#&amp;gt; # of rows in new data: 50
#&amp;gt; # of rows passing all tests: 0
#&amp;gt; # of rows failing one or more tests: 50
#&amp;gt; 
#&amp;gt; Test results (failures):
#&amp;gt; &amp;gt; &amp;#39;missing_variable&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;mismatch_class&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;mismatch_levels&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;new_variable&amp;#39;: junk
#&amp;gt; &amp;gt; &amp;#39;outside_range&amp;#39;: Sepal.Width[row(s): #1, #4, #7, #23, #34, #39],
#&amp;gt; Petal.Width[row(s): #6, #15, #21, #32, #48]
#&amp;gt; &amp;gt; &amp;#39;new_level&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;new_NA&amp;#39;: Petal.Length[row(s): #5, #12, #36, #39, #40]
#&amp;gt; &amp;gt; &amp;#39;new_text&amp;#39;: no failures
#&amp;gt; 
#&amp;gt; Test descriptions:
#&amp;gt; &amp;#39;missing_variable&amp;#39;: variable observed in training data but missing in new data
#&amp;gt; &amp;#39;mismatch_class&amp;#39;: &amp;#39;class&amp;#39; in new data does not match &amp;#39;class&amp;#39; in training data
#&amp;gt; &amp;#39;mismatch_levels&amp;#39;: &amp;#39;levels&amp;#39; in new data and training data are not identical
#&amp;gt; &amp;#39;new_variable&amp;#39;: variable observed in new data but not in training data
#&amp;gt; &amp;#39;outside_range&amp;#39;: value in new data outside recorded range in training data
#&amp;gt; &amp;#39;new_level&amp;#39;: new &amp;#39;level&amp;#39; in new data compared to training data
#&amp;gt; &amp;#39;new_NA&amp;#39;: NA observed in new data but not in training data
#&amp;gt; &amp;#39;new_text&amp;#39;: new text in new data compared to training data
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we are in a lot of trouble here. All rows failed, because
a new variable (&lt;code&gt;junk&lt;/code&gt;), that did not appear in the training data, was
suddenly observed in new data. By assumption this invalidates all rows.&lt;/p&gt;
&lt;p&gt;Besides from that, some rows failed, because values &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;-Inf&lt;/code&gt; were outside
the recorded range in the training data for variables &lt;code&gt;Sepal.Width&lt;/code&gt; and
&lt;code&gt;Petal.Width&lt;/code&gt;. Also, a handful of &lt;code&gt;NA&lt;/code&gt; values were encountered in new data
for &lt;code&gt;Petal.Length&lt;/code&gt;. This is a new phenomenon compared to the training data,
where no &lt;code&gt;NA&lt;/code&gt; values were observed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-test-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract test results&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;recorder&lt;/code&gt; allows you extract the results of the validation tests in a number
of ways.&lt;/p&gt;
&lt;div id=&#34;get-failed-tests-as-data.frame&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get failed tests as data.frame&lt;/h4&gt;
&lt;p&gt;You might want to extract the results as a data.frame with the results of the
(failed) tests as columns. To do this, invoke &lt;code&gt;get_failed_tests()&lt;/code&gt; on
&lt;code&gt;playback&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(get_failed_tests(playback), 15))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Sepal.Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Petal.Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;new_NA.Petal.Length&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;new_variable.junk&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;get-failed-tests-as-character&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get failed tests as character&lt;/h4&gt;
&lt;p&gt;It can also be useful to get the results of the (failed) tests as a string with
one entry per row in new data, where names of the failed tests for the given
row are concatenated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(get_failed_tests_string(playback))
#&amp;gt; [1] &amp;quot;outside_range.Sepal.Width;new_variable.junk;&amp;quot;
#&amp;gt; [2] &amp;quot;new_variable.junk;&amp;quot;                          
#&amp;gt; [3] &amp;quot;new_variable.junk;&amp;quot;                          
#&amp;gt; [4] &amp;quot;outside_range.Sepal.Width;new_variable.junk;&amp;quot;
#&amp;gt; [5] &amp;quot;new_NA.Petal.Length;new_variable.junk;&amp;quot;      
#&amp;gt; [6] &amp;quot;outside_range.Petal.Width;new_variable.junk;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-clean-rows&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get clean rows&lt;/h4&gt;
&lt;p&gt;As a third option you can extract a logical vector, that indicates which rows,
that passed the validation tests.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback)
#&amp;gt;  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [45] FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TRUE&lt;/code&gt; means, that a given row is clean and has passed all tests, &lt;code&gt;FALSE&lt;/code&gt;
on the other hand implies that a given row failed one or more tests.&lt;/p&gt;
&lt;p&gt;In this case, all rows are invalid due to the strange column
&lt;code&gt;junk&lt;/code&gt;, that appears in the new data (you might think, this is a strict rule,
but it is consistent nonetheless).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-specific-test-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ignore specific test results&lt;/h3&gt;
&lt;p&gt;It might be, that the user - for various reasons - wants to ignore one or more
of the failed tests. You can handle this easily with &lt;code&gt;recorder&lt;/code&gt;, whenever you
invoke one of the functions &lt;code&gt;get_clean_rows()&lt;/code&gt;, &lt;code&gt;get_failed_tests()&lt;/code&gt; or
&lt;code&gt;get_failed_tests_string()&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;ignore-test-results-from-specific-tests&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from specific tests&lt;/h4&gt;
&lt;p&gt;Let us assume, that we do not care about, if there is a new column in
the new data, that was not observed in the training data. The results of a
specific test can be ignored with the &lt;code&gt;ignore_tests&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Let us try it out and ignore the results of the &lt;code&gt;new_variable&lt;/code&gt; validation test.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback, ignore_tests = &amp;quot;new_variable&amp;quot;)
#&amp;gt;  [1] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [12] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [23] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [34] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [45]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to this - less restrictive - selection, 35
of the new observations are now valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-test-results-from-tests-of-specific-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from tests of specific columns&lt;/h4&gt;
&lt;p&gt;Maybe you - for some reason - do not care about the tests results for a specific
column. You can ignore results from tests of a specific variable with the
&lt;code&gt;ignore_cols&lt;/code&gt; argument. Let us go ahead and suppress the test results from
tests of the &lt;code&gt;Petal.Length&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback, 
               ignore_tests = &amp;quot;new_variable&amp;quot;,
               ignore_cols = &amp;quot;Petal.Length&amp;quot;)
#&amp;gt;  [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [12]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [23] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [34] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [45]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, with this modification a total of 39
of the new observations are now valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-test-results-from-specific-tests-of-specific-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from specific tests of specific columns&lt;/h4&gt;
&lt;p&gt;It is also possible to ignore the test results of specific tests of specific
columns with the &lt;code&gt;ignore_combinations&lt;/code&gt; argument. Let us try to ignore the
&lt;code&gt;outside_range&lt;/code&gt; test, but only for the &lt;code&gt;Sepal.Width&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(get_failed_tests(playback, 
                                   ignore_tests = &amp;quot;new_variable&amp;quot;,
                                   ignore_cols = &amp;quot;Petal.Length&amp;quot;,
                                   ignore_combinations = list(outside_range = &amp;quot;Sepal.Width&amp;quot;)),
                  15))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Petal.Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you see - with this additional removal - the only test failures that remain
are the ones from the &lt;code&gt;outside_range&lt;/code&gt; test of the &lt;code&gt;Petal.Width&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;That is it, I hope, that you will enjoy the &lt;code&gt;recorder&lt;/code&gt; package :)&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;[STOP]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>