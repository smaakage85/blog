<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Matrix on pRopaganda by smaakagen</title>
    <link>/tags/design-matrix/</link>
    <description>Recent content in Design Matrix on pRopaganda by smaakagen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/design-matrix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>One Recipe Step to Rule Them All</title>
      <link>/2018/12/03/one-recipe-step-to-rule-them-all/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/03/one-recipe-step-to-rule-them-all/</guid>
      <description>&lt;p&gt;In this post I will demonstrate, how my new R package &lt;code&gt;customsteps&lt;/code&gt; can be used
to create recipe steps, that apply custom transformations to a data set.&lt;/p&gt;
&lt;p&gt;Note, you should already be fairly familiar with the &lt;a href=&#34;https://cran.r-project.org/web/packages/recipes/recipes.pdf&#34;&gt;&lt;code&gt;recipes&lt;/code&gt;&lt;/a&gt; package
before you continue reading this post or give &lt;code&gt;customsteps&lt;/code&gt; a spin!&lt;/p&gt;
&lt;p&gt;Recommended music for this reading session:&lt;/p&gt;
&lt;iframe src=&#34;https://open.spotify.com/embed/track/323v1HB9ugfmQyqZwFaZwz&#34; width=&#34;300&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;
&lt;/iframe&gt;
&lt;div id=&#34;introducing-the-customsteps-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introducing the &lt;code&gt;customsteps&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;Along with the &lt;code&gt;recipes&lt;/code&gt; package distribution comes a number of pre-specified steps, that enables the user to manipulate data sets in various ways. The
resulting data sets (/design matrices) can then be used as inputs
into statistical or machine learning models.&lt;/p&gt;
&lt;p&gt;If you want to apply a specific transformation to your data set, that is not supported by the pre-specified steps, you have two options. You can write an entire &lt;a href=&#34;https://github.com/tidymodels/recipes/blob/master/vignettes/Custom_Steps.Rmd&#34;&gt;custom recipe step &lt;strong&gt;from
scratch&lt;/strong&gt;&lt;/a&gt;. This however takes quite a bit of work and code. An alternative - and sometimes better - approach is to apply the &lt;code&gt;customsteps&lt;/code&gt; package, that I have just released on CRAN.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;customsteps&amp;quot;)
library(customsteps)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;customizable-higher-order-steps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Customizable Higher-Order Steps&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;customsteps&lt;/code&gt; contains a set of customizable higher-order recipe step
functions, that create specifications of recipe steps, that will transform or filter the data in accordance with custom input functions.&lt;/p&gt;
&lt;p&gt;Let me just remind you of the definition of &lt;a href=&#34;https://en.wikipedia.org/wiki/Higher-order_function&#34;&gt;&lt;strong&gt;higher-order functions&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In mathematics and computer science, a higher-order function is a function that does at least one of the following: 1. takes one or more functions as arguments,
2. returns a function as its result.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, I will present an example of how to use the &lt;code&gt;customsteps&lt;/code&gt; package in order
to create a recipe step, that will apply a custom transformation to a data set.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;use-case-centering-and-scaling-numeric-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Use Case: Centering and Scaling Numeric Data&lt;/h2&gt;
&lt;p&gt;Assume, that I want to transform a variable &lt;span class=&#34;math inline&#34;&gt;\({\mathbf{x}}\)&lt;/span&gt; like this:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Center &lt;span class=&#34;math inline&#34;&gt;\({\mathbf{x}}\)&lt;/span&gt; around an arbitrary number &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Scale the transformed variable, such that its standard deviation equals an
arbitrary number &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The transformed variable &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{x}}\)&lt;/span&gt; can then be derived as (try to
do it yourself):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{x}} = \alpha + (\mathbf{x} - \bar{\mathbf{x}})\frac{\beta}{s_\mathbf{x}}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\bar{\mathbf{x}}\)&lt;/span&gt; is the mean of &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{x}\)&lt;/span&gt;, and
&lt;span class=&#34;math inline&#34;&gt;\(s_\mathbf{x}\)&lt;/span&gt; is the standard deviation of &lt;span class=&#34;math inline&#34;&gt;\({\mathbf{x}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note that centering &lt;span class=&#34;math inline&#34;&gt;\({\mathbf{x}}\)&lt;/span&gt; around 0 and scaling it in order to arrive at a standard deviation of 1 is just a special case of the above transformation with parameters &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 0, \beta = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;write-the-prep-helper-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Write the &lt;code&gt;prep&lt;/code&gt; helper function&lt;/h3&gt;
&lt;p&gt;First, I need to write a function, that estimates the relevant statistical
parameters from an initial data set. I call this function the &lt;code&gt;prep&lt;/code&gt; helper
function.&lt;/p&gt;
&lt;p&gt;Obviously, the above transformation requires the mean &lt;span class=&#34;math inline&#34;&gt;\(\bar{\mathbf{x}}\)&lt;/span&gt; and
standard deviation &lt;span class=&#34;math inline&#34;&gt;\(s_\mathbf{x}\)&lt;/span&gt; to be learned from the initial data set.
Therefore I define a function &lt;code&gt;compute_means_sd&lt;/code&gt;, that estimates the two
parameters for (any arbitrary number of) numeric variables.&lt;/p&gt;
&lt;p&gt;By convention the &lt;code&gt;prep&lt;/code&gt; helper function must take the argument &lt;code&gt;x&lt;/code&gt;: the subset of
selected variables from the initial data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)

compute_means_sd &amp;lt;- function(x) {
  
  map(.x = x, ~ list(mean = mean(.x), sd = sd(.x)))

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us see the function in action. I will apply it to a subset of the famous
&lt;code&gt;mtcars&lt;/code&gt; data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

# divide &amp;#39;mtcars&amp;#39; into two data sets.
cars_initial &amp;lt;- mtcars[1:16, ]
cars_new &amp;lt;- mtcars[17:nrow(mtcars), ]

# learn parameters from initial data set.
params &amp;lt;- cars_initial %&amp;gt;%
  select(mpg, disp) %&amp;gt;%
  compute_means_sd(.)

# display parameters. 
as.data.frame(params)
#&amp;gt;   mpg.mean  mpg.sd disp.mean disp.sd
#&amp;gt; 1     18.2 4.14761  250.8187 113.372&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works like a charm. Great, we are halfway there!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;write-the-bake-helper-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Write the &lt;code&gt;bake&lt;/code&gt; helper function&lt;/h3&gt;
&lt;p&gt;Second, I have to specify a &lt;code&gt;bake&lt;/code&gt; helper function, that defines how to apply
the transformation to a new data set using the parameters estimated from the
intial data set.&lt;/p&gt;
&lt;p&gt;By convention the &lt;code&gt;bake&lt;/code&gt; helper function must take the following arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: the new data set, that the step will be applied to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prep_output&lt;/code&gt;: the output from the &lt;code&gt;prep&lt;/code&gt; helper function containing
any parameters estimated from the initial data set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I define the function &lt;code&gt;center_scale&lt;/code&gt;, that will serve as my &lt;code&gt;bake&lt;/code&gt; helper
function. It will center and scale variables of a new data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;center_scale &amp;lt;- function(x, prep_output, alpha, beta) {

  # extract only the relevant variables from the new data set.
  new_data &amp;lt;- select(x, names(prep_output))

  # apply transformation to each of these variables.
  # variables are centered around &amp;#39;alpha&amp;#39; and scaled to have a standard 
  # deviation of &amp;#39;beta&amp;#39;.
  map2(.x = new_data,
       .y = prep_output,
       ~ alpha + (.x - .y$mean) * beta / .y$sd)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My first (sanity) check of the function is to
apply it to the initial data set, that was used for estimation of
the means and standard deviations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
# center and scale variables of new data set to have a mean of zero
# and a standard deviation of one.
cars_initial_transformed &amp;lt;- center_scale(x = cars_initial, 
                                         prep_output = params,
                                         alpha = 0, 
                                         beta = 1)

# display transformed variables.
cars_initial_transformed %&amp;gt;%
  compute_means_sd(.) %&amp;gt;%
  as.data.frame(.)
#&amp;gt;       mpg.mean mpg.sd    disp.mean disp.sd
#&amp;gt; 1 1.731877e-16      1 7.199102e-17       1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results are correct within computational precision.&lt;/p&gt;
&lt;p&gt;Also, I will just check the function out on the other subset of &lt;code&gt;mtcars&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# center and scale variables of new data set to have a mean of zero
# and a standard deviation of one.
cars_new_transformed &amp;lt;- center_scale(x = cars_new, 
                                     prep_output = params,
                                     alpha = 0, 
                                     beta = 1)

# display transformed variables.
cars_new_transformed %&amp;gt;%
  as.tibble(.) %&amp;gt;%
  head(.)
#&amp;gt; # A tibble: 6 x 2
#&amp;gt;      mpg   disp
#&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 -0.844  1.67 
#&amp;gt; 2  3.42  -1.52 
#&amp;gt; 3  2.94  -1.54 
#&amp;gt; 4  3.79  -1.59 
#&amp;gt; 5  0.796 -1.15 
#&amp;gt; 6 -0.651  0.593&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks right! All that is left now is to put the pieces together into my new
very own custom recipe step.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;putting-the-pieces-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Putting the pieces together&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;step_custom_transformation&lt;/code&gt; takes &lt;code&gt;prep&lt;/code&gt; and &lt;code&gt;bake&lt;/code&gt; helper
functions as inputs and turns them into a complete recipe step, that can be used
out of the box.&lt;/p&gt;
&lt;p&gt;I create the specification of the recipe step from the new functions &lt;code&gt;compute_means_sd&lt;/code&gt; and
&lt;code&gt;center_scale&lt;/code&gt; by invoking &lt;code&gt;step_custom_transformation&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(recipes)
rec &amp;lt;- recipe(cars_initial) %&amp;gt;%
  step_custom_transformation(mpg, disp,
                             prep_function = compute_means_sd,
                             bake_function = center_scale,
                             bake_options = list(alpha = 0, beta = 1),
                             bake_how = &amp;quot;replace&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that is all there is to it! Easy.&lt;/p&gt;
&lt;p&gt;Note, by setting ‘bake_options’ to “replace”, the
selected terms will be replaced with the transformed variables, when the
recipe is baked.&lt;/p&gt;
&lt;p&gt;I will just check, that the recipe works as expected. First I will &lt;code&gt;prep&lt;/code&gt;(/train)
the recipe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# prep recipe.
rec &amp;lt;- prep(rec)

# print recipe.
rec
#&amp;gt; Data Recipe
#&amp;gt; 
#&amp;gt; Inputs:
#&amp;gt; 
#&amp;gt;   11 variables (no declared roles)
#&amp;gt; 
#&amp;gt; Training data contained 16 data points and no missing data.
#&amp;gt; 
#&amp;gt; Operations:
#&amp;gt; 
#&amp;gt; The following variables are used for computing transformations
#&amp;gt;  and will be dropped afterwards:
#&amp;gt;  mpg, disp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will go right ahead and bake the new recipe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# bake recipe.
cars_baked &amp;lt;- rec %&amp;gt;%
  bake(cars_new) %&amp;gt;%
  select(mpg, disp)
  
# display results.
cars_baked %&amp;gt;%
  head(.)
#&amp;gt; # A tibble: 6 x 2
#&amp;gt;      mpg   disp
#&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 -0.844  1.67 
#&amp;gt; 2  3.42  -1.52 
#&amp;gt; 3  2.94  -1.54 
#&amp;gt; 4  3.79  -1.59 
#&amp;gt; 5  0.796 -1.15 
#&amp;gt; 6 -0.651  0.593&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results are as expected (same as before). Great succes!&lt;/p&gt;
&lt;p&gt;You should now be able
to create your very own recipe steps to do (almost) whatever
transformation you want to your data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Customized recipe steps can be created with a minimum of effort and code using
my new R package &lt;code&gt;customsteps&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;customsteps&lt;/code&gt; step functions are higher-order functions,
that create specificiations of recipe steps from custom input functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me hear from you, if you have any feedback on the package.&lt;/p&gt;
&lt;p&gt;Best,
smaakagen&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>