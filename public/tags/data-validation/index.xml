<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Validation on pRopaganda by smaakagen</title>
    <link>/tags/data-validation/</link>
    <description>Recent content in Data Validation on pRopaganda by smaakagen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/data-validation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&#34;trimmer&#34; - trim an R object</title>
      <link>/2019/12/19/trimmer-trim-an-r-object/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/19/trimmer-trim-an-r-object/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/smaakage85/trimmer/master/man/figures/hex_trimmer.png&#34; align=&#34;right&#34; height=250/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trimmer&lt;/code&gt; 0.7.5 is now available on CRAN.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trimmer&lt;/code&gt; is a lightweight toolkit to trim a (potentially big) R object without
breaking the results of a given function call, where the (trimmed) R object
is given as argument.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;trim&lt;/code&gt; function is the bread and butter of &lt;code&gt;trimmer&lt;/code&gt;. It seeks to reduce
the size of an R object by recursively removing elements from the object
one-by-one. It does so in a ‘greedy’ fashion - it constantly tries to
remove the element that uses the most memory.&lt;/p&gt;
&lt;p&gt;The trimming process is constrained by a reference function call. The trimming
procedure will not allow elements to be removed from the object, that will
cause results from the function call to diverge from the original results of
the function call.&lt;/p&gt;
&lt;iframe src=&#34;https://open.spotify.com/embed/track/4ABWPP59ItFKykdaDF09K5&#34; width=&#34;300&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;
&lt;/iframe&gt;
&lt;div id=&#34;motivation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;There can be many data reasons as to why, you might want to ‘trim’ an R object.&lt;/p&gt;
&lt;p&gt;A typical example could be a R model object. It will typically contain all kinds
of (more or less useful) stuff and meta data with information about the model.
You might want to try to reduce the size of the object for (memory) efficiency purposes,
such that the model only contains only what is in fact needed to predict
new observations - and &lt;em&gt;nothing&lt;/em&gt; else!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install the development version of &lt;code&gt;trimmer&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remotes::install_github(&amp;quot;smaakage85/trimmer&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or install the version released on CRAN:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;trimmer&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;trimming-process&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trimming Process&lt;/h2&gt;
&lt;p&gt;The trimming procedure - conducted with &lt;code&gt;trim()&lt;/code&gt; - consists of the following steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Call the specified function with the object before trimming and save results for reference.&lt;/li&gt;
&lt;li&gt;Compute size of elements in the most shallow layer of object. These elements are the candidates for elimination.&lt;/li&gt;
&lt;li&gt;Identify the candidate element that uses most memory.&lt;/li&gt;
&lt;li&gt;Call function again, but this time with the element from step 3 removed from object.&lt;/li&gt;
&lt;li&gt;If results from function call are the same as in step 1, remove element from object. If results diverge, keep element - and expand the list with candidates for elimination with elements of most shallow layer of this object (if there are any).&lt;/li&gt;
&lt;li&gt;Repeat steps 3 to 5, until target size is reached or until no further
elements can be removed without results from function call diverge.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;workflow-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Workflow Example&lt;/h2&gt;
&lt;p&gt;Get ready by loading the package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(trimmer)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Train a model on the famous &lt;code&gt;mtcars&lt;/code&gt; data set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load training data.
trn &amp;lt;- datasets::mtcars

# estimate model.
mdl &amp;lt;- lm(mpg ~ ., data = trn)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I want to trim the model object &lt;code&gt;mdl&lt;/code&gt; as possible without affecting the predictions,
computed with function &lt;code&gt;predict()&lt;/code&gt;, for the resulting model.&lt;/p&gt;
&lt;p&gt;The trimming is then simply conducted by invoking:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdl_trim &amp;lt;- trim(obj = mdl,
                 obj_arg_name = &amp;quot;object&amp;quot;,
                 fun = predict,
                 newdata = trn)
#&amp;gt; * Initial object size: 22.22 kB
#&amp;gt; Begin trimming object.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;model&amp;#39;)]], element size = 14.05 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 18.19 kB [v4.03 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;)]], element size = 7.79 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;terms&amp;#39;)]], element size = 7.63 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;qr&amp;#39;)]], element size = 6.66 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 14.95 kB [v7.27 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;residuals&amp;#39;)]], element size = 2.86 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 14.53 kB [v7.7 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;fitted.values&amp;#39;)]], element size = 2.86 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 11.66 kB [v10.56 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;effects&amp;#39;)]], element size = 1.4 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 10.76 kB [v11.46 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;coefficients&amp;#39;)]], element size = 1.09 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;call&amp;#39;)]], element size = 728 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 10.09 kB [v12.14 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;xlevels&amp;#39;)]], element size = 208 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 9.85 kB [v12.38 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;qraux&amp;#39;)]], element size = 176 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 9.62 kB [v12.61 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;assign&amp;#39;)]], element size = 96 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 9.46 kB [v12.76 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;pivot&amp;#39;)]], element size = 96 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;rank&amp;#39;)]], element size = 56 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;df.residual&amp;#39;)]], element size = 56 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 9.31 kB [v12.91 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;tol&amp;#39;)]], element size = 56 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 9.17 kB [v13.06 kB]
#&amp;gt; Trimming completed.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it!&lt;/p&gt;
&lt;p&gt;Note, that I provide the &lt;code&gt;trim&lt;/code&gt; function with the extra argument &lt;code&gt;newdata&lt;/code&gt;, that
is passed to the function call with &lt;code&gt;fun&lt;/code&gt;. This means, that the trimming is
constrained by, that the results of ‘fun’ (=&lt;code&gt;predict&lt;/code&gt;) &lt;em&gt;MUST&lt;/em&gt; be exactly the same
on these data before and after the trimming.&lt;/p&gt;
&lt;p&gt;The trimmed model object now measures 9.17 kB. The original
object measured 22.22 kB.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;set-target-size&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set Target Size&lt;/h2&gt;
&lt;p&gt;If you just want the object size to be below some threshold, you can set that
as a criterion. The ‘trimming’ process will continue no further, when this
threshold is reached. This approach can be time-saving compared to
minimizing the object as much as possible (=default setting).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdl_trim &amp;lt;- trim(obj = mdl,
                 obj_arg_name = &amp;quot;object&amp;quot;,
                 fun = predict,
                 newdata = trn,
                 size_target = 0.015)
#&amp;gt; * Initial object size: 22.22 kB
#&amp;gt; * Target object size: &amp;lt;= 15 kB
#&amp;gt; Begin trimming object.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;model&amp;#39;)]], element size = 14.05 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 18.19 kB [v4.03 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;)]], element size = 7.79 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;terms&amp;#39;)]], element size = 7.63 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;qr&amp;#39;)]], element size = 6.66 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 14.95 kB [v7.27 kB]
#&amp;gt; Trimming completed.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these settings, the trimmed model object measures 14.95 kB. The original
object measured 22.22 kB.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-applications&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other Applications&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;trimmer&lt;/code&gt; is compatible with all R objects, that inherit from the &lt;code&gt;list&lt;/code&gt;
class - not just R model objects - and all kinds of functions - not just the
&lt;code&gt;predict&lt;/code&gt; function. Hence &lt;code&gt;trimmer&lt;/code&gt; is quite a flexible tool.&lt;/p&gt;
&lt;p&gt;To illustrate I will trim the same object but under the constraint, that the
results from the &lt;code&gt;summary()&lt;/code&gt; function must be preserved.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdl_trim &amp;lt;- trim(obj = mdl,
                 obj_arg_name = &amp;quot;object&amp;quot;,
                 fun = summary)
#&amp;gt; * Initial object size: 22.22 kB
#&amp;gt; Begin trimming object.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;model&amp;#39;)]], element size = 14.05 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 18.19 kB [v4.03 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;)]], element size = 7.79 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;terms&amp;#39;)]], element size = 7.63 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;qr&amp;#39;)]], element size = 6.66 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;residuals&amp;#39;)]], element size = 2.86 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;fitted.values&amp;#39;)]], element size = 2.86 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;effects&amp;#39;)]], element size = 1.4 kB
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 17.42 kB [v4.81 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;coefficients&amp;#39;)]], element size = 1.09 kB
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;call&amp;#39;)]], element size = 728 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;xlevels&amp;#39;)]], element size = 208 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 17.21 kB [v5.02 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;qraux&amp;#39;)]], element size = 176 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 16.94 kB [v5.28 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;assign&amp;#39;)]], element size = 96 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 16.76 kB [v5.46 kB]
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;pivot&amp;#39;)]], element size = 96 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;rank&amp;#39;)]], element size = 56 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;df.residual&amp;#39;)]], element size = 56 B
#&amp;gt; x Element could not be removed.
#&amp;gt; ~ Trying to remove element [[c(&amp;#39;qr&amp;#39;,&amp;#39;tol&amp;#39;)]], element size = 56 B
#&amp;gt; v Element removed.
#&amp;gt; * Object size after removal: 16.65 kB [v5.58 kB]
#&amp;gt; Trimming completed.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other Notes&lt;/h2&gt;
&lt;p&gt;You can choose, that certain elements &lt;em&gt;MUST NOT&lt;/em&gt; be removed during the trimming process. Do this with the &lt;code&gt;dont_touch&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;You can choose whether or not to tolerate warnings from reference function calls with the argument &lt;code&gt;tolerate_warnings&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;future-development&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Future Development&lt;/h2&gt;
&lt;p&gt;I would like to extend the framework to also support parallellization.&lt;/p&gt;
&lt;p&gt;That is it, I hope, that you will enjoy the &lt;code&gt;trimmer&lt;/code&gt; package :)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>recorder: Validate Predictors in New Data</title>
      <link>/2019/05/21/recorder-validate-new-data-for-predictions/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/21/recorder-validate-new-data-for-predictions/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://github.com/smaakage85/recorder/blob/master/man/figures/logo.png?raw=true&#34; align=&#34;right&#34; height=250/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;recorder&lt;/code&gt; 0.8.1 is now available on CRAN. &lt;code&gt;recorder&lt;/code&gt; is a lightweight toolkit to
validate new observations before computing their corresponding predictions with
a predictive model.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;recorder&lt;/code&gt; the validation process consists of two steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;record relevant statistics and meta data of the variables in the original
training data for the predictive model&lt;/li&gt;
&lt;li&gt;use these data to run a set of basic validation tests on the new set of
observations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we will take a deeper look into, what &lt;code&gt;recorder&lt;/code&gt; has to offer.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;[PLAY]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;iframe src=&#34;https://open.spotify.com/embed/track/0k1xMUwn9sb7bZiqdT9ygx&#34; width=&#34;300&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;
&lt;/iframe&gt;
&lt;div id=&#34;motivation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;There can be many data specific reasons, why you might not be confident in the
predictions of a predictive model on new data.&lt;/p&gt;
&lt;p&gt;Some of them are obvious, e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One or more variables in training data are not found in new data&lt;/li&gt;
&lt;li&gt;The class of a given variable differs in training data and new data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Others are more subtle, for instance when observations in
new data are not within the “span” of the training data. One example of this could
be, when a variable is “N/A” (missing) for a new observation to be predicted,
but no missing values appeared for the same variable in the training data.
This implies, that the new observation is not within the “span” of the training
data. Another way of putting this: the model has never encountered an
observation like this before, therefore there is good reason to doubt the
quality of the prediction.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recorder-workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;recorder workflow&lt;/h2&gt;
&lt;p&gt;We will need some data in order to demonstrate the &lt;code&gt;recorder&lt;/code&gt; workflow. As so
many times before the famous &lt;code&gt;iris&lt;/code&gt; data set will be used as an example. The
data set is divided into training data, that can be used for model development,
and new data for predictions after modelling, which we can validate with
&lt;code&gt;recordr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
trn_idx &amp;lt;- sample(seq_len(nrow(iris)), 100)
data_training &amp;lt;- iris[trn_idx, ]
data_new &amp;lt;- iris[-trn_idx, ]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;record-statistics-and-meta-data-of-variables-in-training-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Record statistics and meta data of variables in training data&lt;/h3&gt;
&lt;p&gt;What we want to achieve is to validate the new observations (before computing
their predictions with a predictive model) based on relevant
statistics and meta data of the variables in the training data. Therefore
relevant statistics and meta data of the variables must first be learned
(recorded) from the trainingdata of the model. This is done with the &lt;code&gt;record()&lt;/code&gt;
function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(recorder)
tape &amp;lt;- record(data_training)
#&amp;gt; 
#&amp;gt; [RECORD]
#&amp;gt; 
#&amp;gt; ... recording meta data and statistics of 100 rows with 5 columns... 
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This provides us with an object belonging to the &lt;code&gt;data.tape&lt;/code&gt; class.
The &lt;code&gt;data.tape&lt;/code&gt; contains the statistics and meta data recorded from the training
data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tape)
#&amp;gt; List of 2
#&amp;gt;  $ class_variables:List of 5
#&amp;gt;   ..$ Sepal.Length: chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Sepal.Width : chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Petal.Length: chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Petal.Width : chr &amp;quot;numeric&amp;quot;
#&amp;gt;   ..$ Species     : chr &amp;quot;factor&amp;quot;
#&amp;gt;  $ parameters     :List of 5
#&amp;gt;   ..$ Sepal.Length:List of 3
#&amp;gt;   .. ..$ min   : num 4.3
#&amp;gt;   .. ..$ max   : num 7.9
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Sepal.Width :List of 3
#&amp;gt;   .. ..$ min   : num 2
#&amp;gt;   .. ..$ max   : num 4.2
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Petal.Length:List of 3
#&amp;gt;   .. ..$ min   : num 1
#&amp;gt;   .. ..$ max   : num 6.9
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Petal.Width :List of 3
#&amp;gt;   .. ..$ min   : num 0.1
#&amp;gt;   .. ..$ max   : num 2.5
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;   ..$ Species     :List of 2
#&amp;gt;   .. ..$ levels: chr [1:3] &amp;quot;setosa&amp;quot; &amp;quot;versicolor&amp;quot; &amp;quot;virginica&amp;quot;
#&amp;gt;   .. ..$ any_NA: logi FALSE
#&amp;gt;  - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;list&amp;quot; &amp;quot;data.tape&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, which meta data and statistics are recorded for the individual
variables depends on the class of the given variable, e.g. for a numeric
variable &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values are computed, whilst &lt;code&gt;levels&lt;/code&gt; is recorded for
factor variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;validate-new-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Validate new data&lt;/h3&gt;
&lt;p&gt;First, to spice things up, we will give the new observations a twist by inserting
some extreme values and some missing values. On top of that we will create a new
column, that was not observed in training data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create sample of row indices.
samples &amp;lt;- lapply(1:3, function(x) {
  set.seed(x) 
  sample(nrow(data_new), 5, replace = FALSE)})

# create numeric values without range, -Inf and Inf.
data_new$Sepal.Width[samples[[1]]] &amp;lt;- -Inf
data_new$Petal.Width[samples[[2]]] &amp;lt;- Inf

# insert NA&amp;#39;s in numeric vector.
data_new$Petal.Length[samples[[3]]] &amp;lt;- NA_real_

# insert new column.
data_new$junk &amp;lt;- &amp;quot;junk&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we will validate the new observations by running a number of basic
validation tests on each of the new observations. The tests are based on the
&lt;code&gt;data.tape&lt;/code&gt; with the recorded statistics and meta data of variabels in the
training data.&lt;/p&gt;
&lt;p&gt;You can get an overview over the validation tests with &lt;code&gt;get_tests_meta_data()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_tests_meta_data()
#&amp;gt;           test_name evaluate_level   evaluate_class
#&amp;gt; 1: missing_variable            col              all
#&amp;gt; 2:   mismatch_class            col              all
#&amp;gt; 3:  mismatch_levels            col           factor
#&amp;gt; 4:     new_variable            col              all
#&amp;gt; 5:    outside_range            row numeric, integer
#&amp;gt; 6:        new_level            row           factor
#&amp;gt; 7:           new_NA            row              all
#&amp;gt; 8:         new_text            row        character
#&amp;gt;                                                    description
#&amp;gt; 1:  variable observed in training data but missing in new data
#&amp;gt; 2: &amp;#39;class&amp;#39; in new data does not match &amp;#39;class&amp;#39; in training data
#&amp;gt; 3:    &amp;#39;levels&amp;#39; in new data and training data are not identical
#&amp;gt; 4:      variable observed in new data but not in training data
#&amp;gt; 5:   value in new data outside recorded range in training data
#&amp;gt; 6:           new &amp;#39;level&amp;#39; in new data compared to training data
#&amp;gt; 7:            NA observed in new data but not in training data
#&amp;gt; 8:              new text in new data compared to training data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run the tests simply invoke the &lt;code&gt;play()&lt;/code&gt; function with the recorded &lt;code&gt;data.tape&lt;/code&gt;
on the new data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;playback &amp;lt;- play(tape, data_new)
#&amp;gt; 
#&amp;gt; [PLAY]
#&amp;gt; 
#&amp;gt; ... playing data.tape on new data with 50 rows with 6 columns ...
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we actually have here is an object belonging to the new &lt;code&gt;data.playback&lt;/code&gt;
class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(playback)
#&amp;gt; [1] &amp;quot;data.playback&amp;quot; &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, now let us have a detailed look at the test results with the &lt;code&gt;print()&lt;/code&gt;
method.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;playback
#&amp;gt; 
#&amp;gt; [PLAY]
#&amp;gt; 
#&amp;gt; # of rows in new data: 50
#&amp;gt; # of rows passing all tests: 0
#&amp;gt; # of rows failing one or more tests: 50
#&amp;gt; 
#&amp;gt; Test results (failures):
#&amp;gt; &amp;gt; &amp;#39;missing_variable&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;mismatch_class&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;mismatch_levels&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;new_variable&amp;#39;: junk
#&amp;gt; &amp;gt; &amp;#39;outside_range&amp;#39;: Sepal.Width[row(s): #1, #4, #7, #23, #34, #39],
#&amp;gt; Petal.Width[row(s): #6, #15, #21, #32, #48]
#&amp;gt; &amp;gt; &amp;#39;new_level&amp;#39;: no failures
#&amp;gt; &amp;gt; &amp;#39;new_NA&amp;#39;: Petal.Length[row(s): #5, #12, #36, #39, #40]
#&amp;gt; &amp;gt; &amp;#39;new_text&amp;#39;: no failures
#&amp;gt; 
#&amp;gt; Test descriptions:
#&amp;gt; &amp;#39;missing_variable&amp;#39;: variable observed in training data but missing in new data
#&amp;gt; &amp;#39;mismatch_class&amp;#39;: &amp;#39;class&amp;#39; in new data does not match &amp;#39;class&amp;#39; in training data
#&amp;gt; &amp;#39;mismatch_levels&amp;#39;: &amp;#39;levels&amp;#39; in new data and training data are not identical
#&amp;gt; &amp;#39;new_variable&amp;#39;: variable observed in new data but not in training data
#&amp;gt; &amp;#39;outside_range&amp;#39;: value in new data outside recorded range in training data
#&amp;gt; &amp;#39;new_level&amp;#39;: new &amp;#39;level&amp;#39; in new data compared to training data
#&amp;gt; &amp;#39;new_NA&amp;#39;: NA observed in new data but not in training data
#&amp;gt; &amp;#39;new_text&amp;#39;: new text in new data compared to training data
#&amp;gt; 
#&amp;gt; [STOP]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we are in a lot of trouble here. All rows failed, because
a new variable (&lt;code&gt;junk&lt;/code&gt;), that did not appear in the training data, was
suddenly observed in new data. By assumption this invalidates all rows.&lt;/p&gt;
&lt;p&gt;Besides from that, some rows failed, because values &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;-Inf&lt;/code&gt; were outside
the recorded range in the training data for variables &lt;code&gt;Sepal.Width&lt;/code&gt; and
&lt;code&gt;Petal.Width&lt;/code&gt;. Also, a handful of &lt;code&gt;NA&lt;/code&gt; values were encountered in new data
for &lt;code&gt;Petal.Length&lt;/code&gt;. This is a new phenomenon compared to the training data,
where no &lt;code&gt;NA&lt;/code&gt; values were observed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-test-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract test results&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;recorder&lt;/code&gt; allows you extract the results of the validation tests in a number
of ways.&lt;/p&gt;
&lt;div id=&#34;get-failed-tests-as-data.frame&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get failed tests as data.frame&lt;/h4&gt;
&lt;p&gt;You might want to extract the results as a data.frame with the results of the
(failed) tests as columns. To do this, invoke &lt;code&gt;get_failed_tests()&lt;/code&gt; on
&lt;code&gt;playback&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(get_failed_tests(playback), 15))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Sepal.Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Petal.Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;new_NA.Petal.Length&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;new_variable.junk&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;get-failed-tests-as-character&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get failed tests as character&lt;/h4&gt;
&lt;p&gt;It can also be useful to get the results of the (failed) tests as a string with
one entry per row in new data, where names of the failed tests for the given
row are concatenated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(get_failed_tests_string(playback))
#&amp;gt; [1] &amp;quot;outside_range.Sepal.Width;new_variable.junk;&amp;quot;
#&amp;gt; [2] &amp;quot;new_variable.junk;&amp;quot;                          
#&amp;gt; [3] &amp;quot;new_variable.junk;&amp;quot;                          
#&amp;gt; [4] &amp;quot;outside_range.Sepal.Width;new_variable.junk;&amp;quot;
#&amp;gt; [5] &amp;quot;new_NA.Petal.Length;new_variable.junk;&amp;quot;      
#&amp;gt; [6] &amp;quot;outside_range.Petal.Width;new_variable.junk;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-clean-rows&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Get clean rows&lt;/h4&gt;
&lt;p&gt;As a third option you can extract a logical vector, that indicates which rows,
that passed the validation tests.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback)
#&amp;gt;  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
#&amp;gt; [45] FALSE FALSE FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;TRUE&lt;/code&gt; means, that a given row is clean and has passed all tests, &lt;code&gt;FALSE&lt;/code&gt;
on the other hand implies that a given row failed one or more tests.&lt;/p&gt;
&lt;p&gt;In this case, all rows are invalid due to the strange column
&lt;code&gt;junk&lt;/code&gt;, that appears in the new data (you might think, this is a strict rule,
but it is consistent nonetheless).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-specific-test-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ignore specific test results&lt;/h3&gt;
&lt;p&gt;It might be, that the user - for various reasons - wants to ignore one or more
of the failed tests. You can handle this easily with &lt;code&gt;recorder&lt;/code&gt;, whenever you
invoke one of the functions &lt;code&gt;get_clean_rows()&lt;/code&gt;, &lt;code&gt;get_failed_tests()&lt;/code&gt; or
&lt;code&gt;get_failed_tests_string()&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;ignore-test-results-from-specific-tests&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from specific tests&lt;/h4&gt;
&lt;p&gt;Let us assume, that we do not care about, if there is a new column in
the new data, that was not observed in the training data. The results of a
specific test can be ignored with the &lt;code&gt;ignore_tests&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;Let us try it out and ignore the results of the &lt;code&gt;new_variable&lt;/code&gt; validation test.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback, ignore_tests = &amp;quot;new_variable&amp;quot;)
#&amp;gt;  [1] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [12] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [23] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [34] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [45]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to this - less restrictive - selection, 35
of the new observations are now valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-test-results-from-tests-of-specific-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from tests of specific columns&lt;/h4&gt;
&lt;p&gt;Maybe you - for some reason - do not care about the tests results for a specific
column. You can ignore results from tests of a specific variable with the
&lt;code&gt;ignore_cols&lt;/code&gt; argument. Let us go ahead and suppress the test results from
tests of the &lt;code&gt;Petal.Length&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_clean_rows(playback, 
               ignore_tests = &amp;quot;new_variable&amp;quot;,
               ignore_cols = &amp;quot;Petal.Length&amp;quot;)
#&amp;gt;  [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [12]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [23] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
#&amp;gt; [34] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
#&amp;gt; [45]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, with this modification a total of 39
of the new observations are now valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ignore-test-results-from-specific-tests-of-specific-columns&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Ignore test results from specific tests of specific columns&lt;/h4&gt;
&lt;p&gt;It is also possible to ignore the test results of specific tests of specific
columns with the &lt;code&gt;ignore_combinations&lt;/code&gt; argument. Let us try to ignore the
&lt;code&gt;outside_range&lt;/code&gt; test, but only for the &lt;code&gt;Sepal.Width&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(get_failed_tests(playback, 
                                   ignore_tests = &amp;quot;new_variable&amp;quot;,
                                   ignore_cols = &amp;quot;Petal.Length&amp;quot;,
                                   ignore_combinations = list(outside_range = &amp;quot;Sepal.Width&amp;quot;)),
                  15))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;outside_range.Petal.Width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you see - with this additional removal - the only test failures that remain
are the ones from the &lt;code&gt;outside_range&lt;/code&gt; test of the &lt;code&gt;Petal.Width&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;That is it, I hope, that you will enjoy the &lt;code&gt;recorder&lt;/code&gt; package :)&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;[STOP]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>